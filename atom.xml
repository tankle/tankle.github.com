<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>逗豆蓝</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tankle.github.com/"/>
  <updated>2018-01-12T10:51:03.574Z</updated>
  <id>http://tankle.github.com/</id>
  
  <author>
    <name>tankle</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>隐马尔科夫模型实战之拼音转汉字</title>
    <link href="http://tankle.github.com/2018/01/09/pinyin2chinese-hmm/"/>
    <id>http://tankle.github.com/2018/01/09/pinyin2chinese-hmm/</id>
    <published>2018-01-09T10:34:55.000Z</published>
    <updated>2018-01-12T10:51:03.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>中文输入法有许多不同种的方法，主要有三大类：拼音输入法、形码输入法(如：五笔)和音型码输入法(如：二笔)，而当今最流行的输入法非拼音输入法莫属了。<br>在拼音输入法中，用户首先将中文转换为拼音，然后输入法根据输入的拼音序列转换为对应的汉字，已完成中文的输入。</p><p>在云音乐搜索中，由于用户每输入一个字符就会触发一次搜索，因此在搜索日志当中能收到大量的拼音序列搜索词。比如：zhou jie lun（周杰伦），li rong hao（李荣浩）。如果能够准确识别这些拼音序列，并转换为对应的中文搜索词，能显著提高用户的搜索体验。</p><h2 id="难点"><a href="#难点" class="headerlink" title="难点"></a>难点</h2><p>拼音转汉字的一些难点：</p><ol><li>一个拼音对应多个汉字，如何确定一个拼音对应哪个汉字？</li><li>拼音序列对应这多种可能的组合方式，如何选出最好的一种组合方式，比如：jie lun，有：杰伦、结论，该选择哪个转换结果呢？</li></ol><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><p>用户输入的拼音序列，是一个可以观察到的序列，而拼音对应的汉字则可以看做是一个不可见序列，通过观察变量求解隐藏变量，这是隐马尔科夫模型的强项啊！</p><h3 id="隐马尔科夫模型简介"><a href="#隐马尔科夫模型简介" class="headerlink" title="隐马尔科夫模型简介"></a>隐马尔科夫模型简介</h3><p>一些基本符号的说明：</p><ul><li>Q  是所有可能的隐藏状态的集合, 其中  N  是可能的状态数， 对应所有可能的汉字的状态数量；</li><li>V  是所有可能的观测的集合, 其中  M  是可能的观测数，对应所有可能的拼音的状态数量；<br>$$ Q= { q_1, q_2,…,q_N }, V= {v_1,v_2,…,v_M } $$</li><li>I  是长度为  T  的隐藏状态序列， 对应用户输入的拼音序列对应的汉字序列；</li><li>O  是对应的观测序列， 对应用户输入的拼音序列；<br>$$I={i_1,i_2,…,i_T },O={o_1,o_2,…,o_T}$$</li></ul><p>隐马尔科夫模型（HMM，Hidden Markov Models）可以使用一个三元组来刻画$λ=(π,A,B)$:</p><ul><li>$A$为隐藏状态转移概率分布，一般用一个矩阵表示：<br>$A=[a_{ij}]_{N*N}$, 其中,  $a_{ij}$  是在时刻  t  处于状态 $q_i$ 的条件下时刻  t+1  转移到状态  $q_j$  的概率；<br>在拼音转换过程中，对应汉字到汉字之间的转移概率；</li><li>$B$为观测概率分布,一般也是用一个矩阵表示：<br>$B = [b_{ik}]_{N*M}$，其中,  $b_{ik}$  是在时刻  t 下的隐藏状态 $q_i$ 到观察状态 $v_k$ 的发射概率:<br>对应汉字到拼音之间的发射概率；</li><li>π  是初始状态概率向量:<br>$π=(π_i)_{N×1}  $</li></ul><h3 id="HMM的三个基本问题"><a href="#HMM的三个基本问题" class="headerlink" title="HMM的三个基本问题"></a>HMM的三个基本问题</h3><ul><li><p>概率计算问题: 前向-后向算法——动态规划<br>给定模型$λ=(A,B,π)$和观测序列$O=\{o_1,o_2,…,o_T\}$<br>计算模型 $λ$ 下观测序列 $O$  出现的概率  $P(O∣λ)$</p></li><li><p>学习问题: Baum-Welch算法(状态未知)——EM<br>已知观测序列 $O={o_1,o_2,…,o_T}$<br>估计模型  $λ=(A,B,π)$的参数,使得在该模型下观测序列 $P(O∣λ)$  最大</p></li><li><p>预测问题: Viterbi算法——动态规划<br>已知模型  $λ=(A,B,π)$, 和观测序列  $O={o_1,o_2,…,o_T}$<br>求给定观测序列条件概率  $P(I∣O,λ)$  最大的状态序列  $I={i_1,i_2,…,i_T}$</p></li></ul><h3 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h3><ol><li>可以从搜索日志中抽取一批中文搜索词，再结合已有的词典，将对应中文转换为对应的拼音序列</li><li>对所有的词按照单字分词，并统计各个词出现的频率，即可作为初始化概率$π$</li><li>统计每个拼音对应汉字以及各自出现的次数，就可以得到观察概率分布$B$</li><li>最后统计每个汉字后面出现的汉字的次数，以此作为隐藏状态的转移概率分布$A$</li></ol><p>经过以上步骤之后，就得到一个隐马尔科夫模型$λ$</p><p>然后就可以使用维特比算法对用户输入的拼音进行解码，得到最终的汉字序列。</p><p>后面附有一个简单的python代码。</p><h3 id="一些优化点"><a href="#一些优化点" class="headerlink" title="一些优化点"></a>一些优化点</h3><ol><li>如果数据量过小，纯粹基于上面统计的方法，会有大量转移概率为0的情况，在计算最大路径会导致结果为0， 解决办法可以是选取一个比较小的转移概率来避免；</li><li>如果出现了未登录词，也就是词典里面没有，初始化概率为0，也可以选取一个比较小的初始化概率；</li><li>如果用户只输入了一部分的拼音，比如：”zhou jie l”, 这种就需要对query进行补全，可以使用SuggestTree来快速进行补全，然后再进行识别；</li><li>用户输入了中英混合的query，比如：”周jielu”、“li荣昊”, 可以先把中文转化为拼音，并且该位置的观察概率设置大一些，比如：“zhou” -&gt; “周”，假如模型中为0.4， 可以人为设置为0.9等；这种方式还能智能纠错，能够把一些用户输入错的query自动纠错，比如第二个query。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># @author hztancong</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏状态转移矩阵</span></span><br><span class="line">trans_prob = &#123;<span class="string">"周杰"</span>:<span class="number">0.9</span>,</span><br><span class="line">              <span class="string">"周姐"</span>:<span class="number">0.1</span>,</span><br><span class="line">              <span class="string">"周洁"</span>:<span class="number">0.3</span>,</span><br><span class="line">              <span class="string">"杰伦"</span>:<span class="number">0.8</span>,</span><br><span class="line">              <span class="string">"结论"</span>:<span class="number">0.7</span></span><br><span class="line">              &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏状态初始状态</span></span><br><span class="line">pi = &#123;</span><br><span class="line">    <span class="string">"周"</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">"粥"</span>:<span class="number">0.3</span>,</span><br><span class="line">    <span class="string">"杰"</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">"姐"</span>:<span class="number">0.4</span>,</span><br><span class="line">    <span class="string">"节"</span>:<span class="number">0.2</span>,</span><br><span class="line">    <span class="string">"结"</span>:<span class="number">0.3</span>,</span><br><span class="line">    <span class="string">"轮"</span>:<span class="number">0.1</span>,</span><br><span class="line">    <span class="string">"伦"</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">"论"</span>:<span class="number">0.5</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 隐藏状态到观察状态的发射矩阵</span></span><br><span class="line">emit_probs = &#123;</span><br><span class="line">    <span class="string">"周zhou"</span>:<span class="number">0.5</span>,</span><br><span class="line">    <span class="string">"粥zhou"</span>:<span class="number">0.1</span>,</span><br><span class="line">    <span class="string">"姐jie"</span>:<span class="number">0.1</span>,</span><br><span class="line">    <span class="string">"节jie"</span>:<span class="number">0.1</span>,</span><br><span class="line">    <span class="string">"结jie"</span>:<span class="number">0.2</span>,</span><br><span class="line">    <span class="string">"杰jie"</span>:<span class="number">0.2</span>,</span><br><span class="line">    <span class="string">"轮lun"</span>:<span class="number">0.1</span>,</span><br><span class="line">    <span class="string">"伦lun"</span>:<span class="number">0.3</span>,</span><br><span class="line">    <span class="string">"论lun"</span>:<span class="number">0.1</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">viterbi</span><span class="params">(word_list, pinyin_list, n, id2word)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    维特比算法求解最大路径问题</span></span><br><span class="line"><span class="string">    :param word_list:   每个拼音对应的隐藏状态矩阵</span></span><br><span class="line"><span class="string">    :param n:   可能观察到的状态数， 对应为汉字数量</span></span><br><span class="line"><span class="string">    :param id2word:    id到汉字的映射</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    T = len(word_list)  <span class="comment"># 观察状态的长度</span></span><br><span class="line"></span><br><span class="line">    delta = np.zeros((T, n))</span><br><span class="line">    <span class="comment"># 保存转移下标值</span></span><br><span class="line">    psi = np.zeros((T, n), dtype=int)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化第一个字符的转移概率， 设置为每个词在词典中的单独出现的概率</span></span><br><span class="line">    words = word_list[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        delta[<span class="number">0</span>][w] = pi[id2word[w]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 动态规划计算</span></span><br><span class="line">    <span class="keyword">for</span> idx <span class="keyword">in</span> range(<span class="number">1</span>, T):</span><br><span class="line">        words = word_list[idx]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(len(words)):</span><br><span class="line">            max_value = <span class="number">0</span></span><br><span class="line">            pre_words = word_list[idx<span class="number">-1</span>]</span><br><span class="line">            index = <span class="number">1</span></span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> range(len(pre_words)):</span><br><span class="line">                tmp_key = id2word[pre_words[j]] + id2word[words[i]]</span><br><span class="line">                <span class="comment"># 获得转移概率，如果不存在，转移概率则为0</span></span><br><span class="line">                <span class="keyword">if</span> tmp_key <span class="keyword">in</span> trans_prob:</span><br><span class="line">                    prob = trans_prob[tmp_key]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    prob = <span class="number">0</span></span><br><span class="line">                tmp_value = delta[idx<span class="number">-1</span>][pre_words[j]] * prob</span><br><span class="line">                <span class="keyword">if</span> max_value &lt; tmp_value:</span><br><span class="line">                    max_value = tmp_value</span><br><span class="line">                    index = j</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 计算观察状态到隐藏状态的概率</span></span><br><span class="line">            tmp_key = id2word[words[i]] + pinyin_list[idx] </span><br><span class="line">            emit_prob = emit_probs[tmp_key] * max_value</span><br><span class="line"></span><br><span class="line">            delta[idx][words[i]] = emit_prob</span><br><span class="line">            psi[idx][words[i]] = pre_words[index]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># print delta</span></span><br><span class="line">    <span class="comment"># 终止</span></span><br><span class="line"></span><br><span class="line">    prob = <span class="number">0</span></span><br><span class="line">    path = np.zeros(T, dtype=int)</span><br><span class="line">    path[T - <span class="number">1</span>] = <span class="number">1</span></span><br><span class="line">    <span class="comment"># 获取最大的转移值</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(n):</span><br><span class="line">        <span class="keyword">if</span> prob &lt; delta[T - <span class="number">1</span>][i]:</span><br><span class="line">            prob = delta[T - <span class="number">1</span>][i]</span><br><span class="line">            path[T - <span class="number">1</span>] = i</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 最优路径回溯</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> range(T - <span class="number">2</span>, <span class="number">-1</span>, <span class="number">-1</span>):</span><br><span class="line">        path[t] = psi[t+<span class="number">1</span>][path[t+<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 生成解析结果</span></span><br><span class="line">    final_word = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(T):</span><br><span class="line">        final_word += id2word[path[i]]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> final_word</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    pinyin_list = [<span class="string">"zhou"</span>, <span class="string">"jie"</span>, <span class="string">"lun"</span>]</span><br><span class="line">    word_list = [[<span class="string">"周"</span>, <span class="string">"粥"</span>], [<span class="string">"杰"</span>, <span class="string">"姐"</span>, <span class="string">"节"</span>, <span class="string">"结"</span>], [<span class="string">"轮"</span>, <span class="string">"伦"</span>, <span class="string">"论"</span>]]</span><br><span class="line">    words = set()</span><br><span class="line">    <span class="keyword">for</span> wl <span class="keyword">in</span> word_list:</span><br><span class="line">        <span class="keyword">for</span> w <span class="keyword">in</span> wl:</span><br><span class="line">            words.add(w)</span><br><span class="line"></span><br><span class="line">    word2idx = dict()</span><br><span class="line">    id2word = dict()</span><br><span class="line">    idx = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> w <span class="keyword">in</span> words:</span><br><span class="line">        word2idx[w] = idx</span><br><span class="line">        id2word[idx] = w</span><br><span class="line">        idx += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将各个汉字转换为id表示</span></span><br><span class="line">    word_id_list = [<span class="keyword">None</span>] * len(word_list)</span><br><span class="line">    <span class="keyword">for</span> i, wl <span class="keyword">in</span> enumerate(word_list):</span><br><span class="line">        word_id_list[i] = [<span class="keyword">None</span>] * len(wl)</span><br><span class="line">        <span class="keyword">for</span> j, w <span class="keyword">in</span> enumerate(wl):</span><br><span class="line">            word_id_list[i][j] = (word2idx[w])</span><br><span class="line"></span><br><span class="line">    viterbi(word_id_list, pinyin_list, len(words), id2word, )</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/tankle/NLPAlgorithm/blob/master/SpellCorrect/src/main/io/github/tankle/algorithm/DTSpellCorrectFactory.java" target="_blank" rel="noopener">Github 代码</a></li><li><a href="http://www.52nlp.cn/hmm-learn-best-practices-four-hidden-markov-models" target="_blank" rel="noopener">HMM学习最佳范例四：隐马尔科夫模型</a></li><li><a href="https://www.zybuluo.com/knight/note/96093" target="_blank" rel="noopener">MathJax 使用手册</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;中文输入法有许多不同种的方法，主要有三大类：拼音输入法、形码输入法(如：五笔)和音型码输入法(如：二笔)，而当今最流行的输入法非拼音输入法莫
      
    
    </summary>
    
      <category term="技术" scheme="http://tankle.github.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
      <category term="机器学习" scheme="http://tankle.github.com/categories/%E6%8A%80%E6%9C%AF/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="HMM" scheme="http://tankle.github.com/tags/HMM/"/>
    
      <category term="隐马尔科夫模型" scheme="http://tankle.github.com/tags/%E9%9A%90%E9%A9%AC%E5%B0%94%E7%A7%91%E5%A4%AB%E6%A8%A1%E5%9E%8B/"/>
    
  </entry>
  
  <entry>
    <title>2017年年终总结</title>
    <link href="http://tankle.github.com/2017/12/20/2017-summary/"/>
    <id>http://tankle.github.com/2017/12/20/2017-summary/</id>
    <published>2017-12-20T10:30:33.000Z</published>
    <updated>2017-12-29T04:16:06.597Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2017年回顾"><a href="#2017年回顾" class="headerlink" title="2017年回顾"></a>2017年回顾</h1><p>今天是我的阳历生日，每到了这个时候，一年也基本快要过去了。</p><p>大家也开始忙着写自己的总结报告，各种复盘。那我也简单总结下这一年吧。<br>&lt;– more –&gt;</p><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>2017年完成了几件非常大的事情：</p><ul><li>买了人生的第一套房子，从此走上了房奴这条不归路<code>~~~~(&gt;_&lt;)~~~~</code></li><li>把女朋友变成了老婆（最开心的一件事了）</li></ul><h2 id="旅游"><a href="#旅游" class="headerlink" title="旅游"></a>旅游</h2><ul><li>5月份，跟着朋友自驾游去了舟山，吃了特别棒的舟山海鲜，如果有空，准备每年都去吃一次</li><li><p>去了一趟西班牙，人生第一次出国旅游，在大学时期就办好了签证上面盖了第一个章；</p><p>  印象最深刻的就是地中海了，海水是那么的蓝。在紧凑的行程中，去了两次巴塞罗那的海滩，躺着细腻的沙滩上，吹着海风，在惬意不过了~</p></li><li><p>爬了徽杭古道，从开始爬到下山，总共花了将近6个小时，还是非常累的；</p></li></ul><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>再过一个月，也算是工作两年的人了，时间过得真快。<br>还记得两年前刚才学校毕业，也差不多这个时候，这么冷，来到了杭州。</p><ul><li>刚过完年，小组老大就辞职了。还是非常感激他的，虽然只有跟了他一年，但也从他身上学到一些东西，比如：如何处理问题、思维方式的转变；</li><li>工作能力的提升：<ol><li>实现了一个基于HMM模型的拼音转汉字的模块</li><li>在Suggest模块中实现了<a href="http://igoro.com/archive/efficient-auto-complete-with-a-ternary-search-tree/" target="_blank" rel="noopener">三元搜索树</a>（ternary search tree）， 能够快速的找到前缀词的候选词列表。其相比于普通的Trie树，能够节省大量的空间，因为Trie需要保存大量的空指针节点；</li><li>下半年将Ranlib的相关算法引入了搜索排序中</li><li>学会了Spark的使用，顺便还学习了Scala语言</li><li>对深度学习有了进一步的了解，</li></ol></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2017年回顾&quot;&gt;&lt;a href=&quot;#2017年回顾&quot; class=&quot;headerlink&quot; title=&quot;2017年回顾&quot;&gt;&lt;/a&gt;2017年回顾&lt;/h1&gt;&lt;p&gt;今天是我的阳历生日，每到了这个时候，一年也基本快要过去了。&lt;/p&gt;
&lt;p&gt;大家也开始忙着写自己的总结
      
    
    </summary>
    
      <category term="生活" scheme="http://tankle.github.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://tankle.github.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="总结" scheme="http://tankle.github.com/tags/%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://tankle.github.com/2017/11/29/hello-world/"/>
    <id>http://tankle.github.com/2017/11/29/hello-world/</id>
    <published>2017-11-29T02:46:54.516Z</published>
    <updated>2017-12-27T13:10:20.498Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><h3 id="具体安装过程"><a href="#具体安装过程" class="headerlink" title="具体安装过程"></a>具体安装过程</h3><h4 id="初始化以及生成网站"><a href="#初始化以及生成网站" class="headerlink" title="初始化以及生成网站"></a>初始化以及生成网站</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g # 这步是安装hexo的命令行</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ cd blog</span><br><span class="line">$ npm install</span><br><span class="line">$ hexo g # 或者hexo generate</span><br><span class="line">$ hexo s # 或者hexo server，可以在http://localhost:4000/ 查看</span><br></pre></td></tr></table></figure><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><p>repo 是Github的项目的链接地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:xxx.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><h4 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save # 需要安装这个插件</span><br><span class="line">$ hexo d # 即可</span><br></pre></td></tr></table></figure><h4 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h4><p>在_config.yml配置文件中添加插件信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">plugins:</span><br><span class="line">  hexo-generator-feed #RSS订阅插件</span><br><span class="line">  hexo-generator-sitemap  #sitemap插件</span><br><span class="line">然后，安装插件，后面要加上--save，表示依赖项。</span><br><span class="line"></span><br><span class="line">RSS订阅插件</span><br><span class="line">hexo-generator-feed：生成rss订阅文件</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">添加配置信息</span><br><span class="line"></span><br><span class="line"># sitemap</span><br><span class="line">sitemap:</span><br><span class="line">  path: sitemap.xml</span><br><span class="line">SiteMap插件</span><br><span class="line">hexo-generator-sitemap：生成易于搜索引擎搜素的网站地图</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">添加配置信息：</span><br><span class="line"></span><br><span class="line"># feed</span><br><span class="line">atom:</span><br><span class="line">  type: atom</span><br><span class="line">  path: atom.xml</span><br><span class="line">  limit: 20</span><br><span class="line">可以在主题配置文件中添加相关配置，可以在页面上显示。</span><br><span class="line">比如，添加链接信息</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">links:</span><br><span class="line">  Feed: /atom.xml</span><br><span class="line">  SiteMap: /sitemap.xml</span><br></pre></td></tr></table></figure><h2 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h2><p><a href="https://www.jianshu.com/p/5973c05d7100" target="_blank" rel="noopener">https://www.jianshu.com/p/5973c05d7100</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
